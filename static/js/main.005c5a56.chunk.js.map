{"version":3,"sources":["constants/constants.js","components/Todo.js","actions/actionMaker.js","components/List.js","App.js","reportWebVitals.js","reducers/reducer.js","store/store.js","index.js"],"names":["CREATE_LIST","DELETE_LIST","EDIT_LIST_NAME","CREATE_TODO","EDIT_TODO","TOGGLE_TODO","DELETE_TODO","REORDER_TODO","REORDER_COLUMN","DARKMODE_TOGGLE","Todo","props","useState","editing","setEditing","darkMode","useSelector","state","dispatch","useDispatch","handleChange","evt","listId","todoId","newText","id","target","value","type","payload","handleDelete","handleToggle","draggableId","index","provided","draggableProps","dragHandleProps","ref","innerRef","className","completed","onDoubleClick","onClick","text","onChange","onMouseLeave","class","List","inputText","setInputText","handleInputChange","handleSubmit","preventDefault","listInfo","todoText","name","newName","droppableId","droppableProps","placeholder","todos","map","todo","key","onSubmit","App","newListName","setNewListName","useEffect","console","log","window","localStorage","setItem","JSON","stringify","checked","size","listName","onDragEnd","result","destination","source","uuid","direction","lists","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","parse","getItem","action","newList","newState","filter","list","newTodo","push","sourceList","find","draggableTodo","splice","draggableColumn","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"6QAAaA,EAAc,cACdC,EAAc,cACdC,EAAiB,iBAEjBC,EAAc,cACdC,EAAY,YACZC,EAAc,cACdC,EAAc,cAEdC,EAAe,eACfC,EAAiB,iBAEjBC,EAAkB,kB,qBC0DhBC,EAhEF,SAACC,GACZ,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMF,YAExCG,EAAWC,cAEXC,EAAe,SAACC,GCoCA,IAACC,EAAQC,EAAQC,EDnCrCN,GCmCqBI,EDnCHX,EAAMW,OCmCKC,EDnCGZ,EAAMc,GCmCDD,EDnCKH,EAAIK,OAAOC,MCoChD,CACLC,KAAMxB,EACNyB,QAAS,CACPP,SACAC,SACAC,eDtCEM,EAAe,WCqDG,IAACR,EAAQC,EDpD/BL,GCoDuBI,EDpDHX,EAAMW,OCoDKC,EDpDGZ,EAAMc,GCqDnC,CACLG,KAAMtB,EACNuB,QAAS,CACPP,SACAC,cDtDEQ,EAAe,WCuCG,IAACT,EAAQC,EDtC/BL,GCsCuBI,EDtCHX,EAAMW,OCsCKC,EDtCGZ,EAAMc,GCuCnC,CACLG,KAAMvB,EACNwB,QAAS,CACPP,SACAC,cDxCJ,OACE,cAAC,IAAD,CAAWS,YAAarB,EAAMc,GAAIQ,MAAOtB,EAAMsB,MAA/C,SACG,SAACC,GAAD,OACC,2DACMA,EAASC,gBACTD,EAASE,iBAFf,IAGEC,IAAKH,EAASI,SAHhB,SAKE,sBAAKC,UAAU,OAAf,UACE,mBACEA,WACG1B,EACG,oBACAF,EAAM6B,UACN,uBACA,aACJ,KACCzB,EAAW,OAAS,MAEvB0B,cAAe,kBAAM3B,GAAYD,IACjC6B,QAASX,EAXX,SAaGpB,EAAMgC,OAET,uBACEJ,WACI1B,EAAiC,aAAvB,sBACZ,KACCE,EAAW,OAAS,MAEvBa,KAAK,OACLD,MAAOhB,EAAMgC,KACbC,SAAUxB,EACVyB,aAAc,kBAAM/B,GAAYD,MAElC,mBACEiC,MAAO/B,EAAW,yBAA2B,qBAC7C2B,QAASZ,cEmCRiB,EAxFF,SAACpC,GACZ,MAAkCC,mBAAS,IAA3C,mBAAOoC,EAAP,KAAkBC,EAAlB,KACA,EAA8BrC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMF,YACxCG,EAAWC,cAEX+B,EAAoB,SAAC7B,GACzB4B,EAAa5B,EAAIK,OAAOC,QAGpBwB,EAAe,SAAC9B,GDoBE,IAACC,ECnBvBD,EAAI+B,iBACJlC,GDkBuBI,EClBHX,EAAM0C,SAAS5B,GDmB9B,CACLG,KAAMzB,EACN0B,QAAS,CACPP,SACAgC,SCvBqCN,MACvCC,EAAa,KAWf,OACE,sBAAKV,UAAU,OAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBACEA,WACG1B,EAAU,SAAW,MAAQ,KAAOE,EAAW,SAAW,MAE7D0B,cAAe,kBAAM3B,GAAW,IAJlC,SAMGH,EAAM0C,SAASE,OAElB,uBACE3B,KAAK,OACLD,MAAOhB,EAAM0C,SAASE,KACtBX,SAtBqB,SAACvB,GDIF,IAACC,EAAQkC,ECHnCtC,GDG2BI,ECHHX,EAAM0C,SAAS5B,GDGJ+B,ECHQnC,EAAIK,OAAOC,MDIjD,CACLC,KAAM1B,EACN2B,QAAS,CACPP,SACAkC,eCcIjB,WACG1B,EAAU,kBAAoB,UAC/B,KACCE,EAAW,OAAS,MAEvB8B,aAAc,kBAAM/B,GAAW,MAEjC,mBACEgC,MAAO/B,EAAW,qBAAuB,iBACzC2B,QA5Ba,WDTG,IAACpB,ECUvBJ,GDVuBI,ECUHX,EAAM0C,SAAS5B,GDT9B,CACLG,KAAM3B,EACN4B,QAAS,CACPP,mBCqCA,cAAC,IAAD,CAAWmC,YAAa9C,EAAM0C,SAAS5B,GAAIG,KAAK,OAAhD,SACG,SAACM,GAAD,OACC,gDACMA,EAASwB,gBADf,IAEErB,IAAKH,EAASI,SACdqB,YAAazB,EAASyB,YACtBC,MAAOjD,EAAM0C,SAASO,MAJxB,UAMGjD,EAAM0C,SAASO,MAAMC,KAAI,SAACC,EAAM7B,GAC/B,OACE,wBAAC,EAAD,2BACM6B,GADN,IAEE7B,MAAOA,EACP8B,IAAKD,EAAKrC,GACVH,OAAQX,EAAM0C,SAAS5B,SAK5BS,EAASyB,YACV,sBAAMK,SAAUb,EAAhB,SACE,uBACEvB,KAAK,OACL+B,YAAY,cACZf,SAAUM,EACVvB,MAAOqB,EACPT,UAAWxB,EAAW,YAAc,uB,QCwCrCkD,MA/Gf,WACE,MAAsCrD,mBAAS,IAA/C,mBAAOsD,EAAP,KAAoBC,EAApB,KACMlD,EAAQD,aAAY,SAACC,GAAD,OAAWA,KAC/BF,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMF,YACxCG,EAAWC,cA8CjB,OA5CAiD,qBAAU,WACRC,QAAQC,IAAI,eACZC,OAAOC,aAAaC,QAAQ,SAAUC,KAAKC,UAAU1D,MACpD,CAACA,IA0CF,sBAAKsB,UAAWxB,EAAW,cAAgB,MAA3C,UACE,gCACE,qBAAIwB,UAAWxB,EAAW,SAAW,KAArC,qBACU,sBAAMwB,UAAWxB,EAAW,WAAa,OAAzC,oBADV,OAIA,cAAC,iBAAD,CACE6D,QAAS7D,EACT6B,SAbe,WACrB1B,EAAS,CAAEU,KAAMnB,KAaXoE,KAAM,QAGV,iCACE,sBAAMb,SAxBS,SAAC3C,GACpBA,EAAI+B,iBACJlC,EF9CK,CACLU,KAAM5B,EACN6B,QAAS,CACPiD,SE2CeZ,KACjBC,EAAe,KAqBX,SACE,uBACEvC,KAAK,OACL+B,YAAY,kBACZhC,MAAOuC,EACPtB,SAAU,SAACvB,GAAD,OAAS8C,EAAe9C,EAAIK,OAAOC,QAC7CY,UAAWxB,EAAW,qBAAuB,qBAGjD,cAAC,IAAD,CAAiBgE,UA9DL,SAACC,GAEjB,IAAQC,EAA2CD,EAA3CC,YAAaC,EAA8BF,EAA9BE,OAAQlD,EAAsBgD,EAAtBhD,YAAaJ,EAASoD,EAATpD,KAErCqD,GAKH/D,EADW,SAATU,EACO,CACPA,KAAMrB,EACNsB,QAAS,CACPoD,cACAC,SACAlD,gBAIK,CACPJ,KAAMpB,EACNqB,QAAS,CACPoD,cACAC,SACAlD,kBAuCF,SACE,cAAC,IAAD,CAAWyB,YAAa0B,cAAQC,UAAU,aAAaxD,KAAK,SAA5D,SACG,SAACM,GAAD,OACC,8CACEK,UAAU,kBACNL,EAASwB,gBAFf,IAGErB,IAAKH,EAASI,SACdqB,YAAazB,EAASyB,YAJxB,UAMG1C,EAAMoE,MAAMxB,KAAI,SAACyB,EAAGrD,GACnB,OACE,cAAC,IAAD,CAAWD,YAAasD,EAAE7D,GAAIQ,MAAOA,EAArC,SACG,SAACC,GAAD,OACC,yDACEK,UAAU,kBACNL,EAASC,gBACTD,EAASE,iBAHf,IAIEC,IAAKH,EAASI,SAJhB,SAME,cAAC,EAAD,CAAMe,SAAUiC,GAAQrD,QARmBqD,EAAE7D,OActDS,EAASyB,wBAMpB,wBAAQpB,UAAWxB,EAAW,OAAS,KAAvC,SACE,2EC5GOwE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCgMCQ,EAzLC,WAMV,IALJ/E,EAKG,uDALKyD,KAAKuB,MAAM1B,OAAOC,aAAa0B,QAAQ,YAAc,CAC3Db,MAAO,GACPtE,UAAU,GAEZoF,EACG,uCACH,OAAQA,EAAOvE,MACb,KAAK5B,EACH,IAAMoG,EAAU,CACd3E,GAAI0D,cACJ5B,KAAM4C,EAAOtE,QAAQiD,SACrBlB,MAAO,IAEHyC,EAAQ,2BAAQpF,GAAR,IAAeoE,MAAM,GAAD,mBAAMpE,EAAMoE,OAAZ,CAAmBe,MACrD,OAAOC,EACT,KAAKpG,EACH,OAAO,2BACFgB,GADL,IAEEoE,MAAOpE,EAAMoE,MAAMiB,QAAO,SAACC,GAAD,OAAUJ,EAAOtE,QAAQP,SAAWiF,EAAK9E,QAEvE,KAAKvB,EACH,OAAO,2BACFe,GADL,IAEEoE,MAAOpE,EAAMoE,MAAMxB,KAAI,SAACyB,GACtB,OAAIA,EAAE7D,KAAO0E,EAAOtE,QAAQP,OACnB,2BAAKgE,GAAZ,IAAe/B,KAAM4C,EAAOtE,QAAQ2B,UAE7B8B,OAIf,KAAKnF,EACH,IAAMqG,EAAU,CACd/E,GAAI0D,cACJxC,KAAMwD,EAAOtE,QAAQyB,SACrBd,WAAW,GAGb,OAAO,2BACFvB,GADL,IAEEoE,MAAOpE,EAAMoE,MAAMxB,KAAI,SAAC0C,GACtB,OAAIA,EAAK9E,KAAO0E,EAAOtE,QAAQP,QAC7BiF,EAAK3C,MAAM6C,KAAKD,GACTD,GAEAA,OAIf,KAAKnG,EACH,OAAO,2BACFa,GADL,IAEEoE,MAAOpE,EAAMoE,MAAMxB,KAAI,SAAC0C,GACtB,OAAIA,EAAK9E,KAAO0E,EAAOtE,QAAQP,OACtB,2BACFiF,GADL,IAEE3C,MAAO2C,EAAK3C,MAAMC,KAAI,SAACC,GACrB,OAAIqC,EAAOtE,QAAQN,SAAWuC,EAAKrC,GAC1B,2BAAKqC,GAAZ,IAAkBnB,KAAMwD,EAAOtE,QAAQL,UAEhCsC,OAKNyC,OAIf,KAAKlG,EACH,OAAO,2BACFY,GADL,IAEEoE,MAAOpE,EAAMoE,MAAMxB,KAAI,SAAC0C,GACtB,OAAIA,EAAK9E,KAAO0E,EAAOtE,QAAQP,OACtB,2BACFiF,GADL,IAEE3C,MAAO2C,EAAK3C,MAAMC,KAAI,SAACC,GACrB,OAAIqC,EAAOtE,QAAQN,SAAWuC,EAAKrC,GAC7BqC,EAAKtB,UACA,2BAAKsB,GAAZ,IAAkBtB,WAAW,IAEtB,2BAAKsB,GAAZ,IAAkBtB,WAAW,IAGxBsB,OAKNyC,OAIf,KAAKjG,EACH,OAAO,2BACFW,GADL,IAEEoE,MAAOpE,EAAMoE,MAAMxB,KAAI,SAAC0C,GACtB,OAAIA,EAAK9E,KAAO0E,EAAOtE,QAAQP,OACtB,2BACFiF,GADL,IAEE3C,MAAO2C,EAAK3C,MAAM0C,QAChB,SAACxC,GAAD,OAAUqC,EAAOtE,QAAQN,SAAWuC,EAAKrC,QAItC8E,OAIf,KAAKhG,EACH,IAAMmG,EAAazF,EAAMoE,MAAMsB,MAC7B,SAACrB,GAAD,OAAOA,EAAE7D,KAAO0E,EAAOtE,QAAQqD,OAAOzB,eAGlCmD,EAAgBF,EAAW9C,MAAM+C,MACrC,SAAC7C,GAAD,OAAUA,EAAKrC,KAAO0E,EAAOtE,QAAQG,eAGvC,OAAKmE,EAAOtE,QAAQoD,YAGlBkB,EAAOtE,QAAQoD,YAAYxB,cAC3B0C,EAAOtE,QAAQqD,OAAOzB,YAEf,2BACFxC,GADL,IAEEoE,MAAOpE,EAAMoE,MAAMxB,KAAI,SAACyB,GACtB,OAAIA,EAAE7D,KAAOiF,EAAWjF,IACtB6D,EAAE1B,MAAMiD,OAAOV,EAAOtE,QAAQqD,OAAOjD,MAAO,GAC5CqD,EAAE1B,MAAMiD,OACNV,EAAOtE,QAAQoD,YAAYhD,MAC3B,EACA2E,GAEKtB,GAEAA,OAKN,2BACFrE,GADL,IAEEoE,MAAOpE,EAAMoE,MAAMxB,KAAI,SAAC0C,GACtB,OAAIA,EAAK9E,KAAO0E,EAAOtE,QAAQqD,OAAOzB,aACpC8C,EAAK3C,MAAMiD,OAAOV,EAAOtE,QAAQqD,OAAOjD,MAAO,GACxCsE,GACEA,EAAK9E,KAAO0E,EAAOtE,QAAQoD,YAAYxB,aAChD8C,EAAK3C,MAAMiD,OACTV,EAAOtE,QAAQoD,YAAYhD,MAC3B,EACA2E,GAEKL,GAEAA,OApCNtF,EAyCX,KAAKT,EACH,GAAK2F,EAAOtE,QAAQoD,YAEb,CACL,IAAM6B,EAAkB7F,EAAMoE,MAAMsB,MAClC,SAACrB,GAAD,OAAOA,EAAE7D,KAAO0E,EAAOtE,QAAQG,eAE3BoE,EAAO,YAAOnF,EAAMoE,OAK1B,OAHAe,EAAQS,OAAOV,EAAOtE,QAAQqD,OAAOjD,MAAO,GAC5CmE,EAAQS,OAAOV,EAAOtE,QAAQoD,YAAYhD,MAAO,EAAG6E,GAE7C,2BACF7F,GADL,IAEEoE,MAAOe,IAZT,OAAOnF,EAeX,KAAKR,EACH,OAAO,2BAAKQ,GAAZ,IAAmBF,UAAWE,EAAMF,WACtC,QACE,OAAOE,IC7LE8F,EAFDC,sBAAYhB,EAASiB,8BAAoBC,8BCIvDC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SAM1B/B,M","file":"static/js/main.005c5a56.chunk.js","sourcesContent":["export const CREATE_LIST = 'CREATE_LIST';\r\nexport const DELETE_LIST = 'DELETE_LIST';\r\nexport const EDIT_LIST_NAME = 'EDIT_LIST_NAME';\r\n\r\nexport const CREATE_TODO = 'CREATE_TODO';\r\nexport const EDIT_TODO = 'EDIT_TODO';\r\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\n\r\nexport const REORDER_TODO = 'REORDER_TODO';\r\nexport const REORDER_COLUMN = 'REORDER_COLUMN';\r\n\r\nexport const DARKMODE_TOGGLE = 'DARKMODE_TOGGLE';\r\n","import React, { useState } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteTodo, editTodo, toggleTodo } from '../actions/actionMaker';\r\nimport './Todo.scss';\r\n\r\nconst Todo = (props) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const darkMode = useSelector((state) => state.darkMode);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (evt) => {\r\n    dispatch(editTodo(props.listId, props.id, evt.target.value));\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    dispatch(deleteTodo(props.listId, props.id));\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    dispatch(toggleTodo(props.listId, props.id));\r\n  };\r\n\r\n  return (\r\n    <Draggable draggableId={props.id} index={props.index}>\r\n      {(provided) => (\r\n        <div\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <div className='Todo'>\r\n            <p\r\n              className={\r\n                (editing\r\n                  ? 'todo-text--hidden'\r\n                  : props.completed\r\n                  ? 'todo-text--completed'\r\n                  : 'todo-text') +\r\n                ' ' +\r\n                (darkMode ? 'dark' : null)\r\n              }\r\n              onDoubleClick={() => setEditing(!editing)}\r\n              onClick={handleToggle}\r\n            >\r\n              {props.text}\r\n            </p>\r\n            <input\r\n              className={\r\n                (!editing ? 'todo-input--hidden' : 'todo-input') +\r\n                ' ' +\r\n                (darkMode ? 'dark' : null)\r\n              }\r\n              type='text'\r\n              value={props.text}\r\n              onChange={handleChange}\r\n              onMouseLeave={() => setEditing(!editing)}\r\n            />\r\n            <i\r\n              class={darkMode ? 'fas fa-trash darkTodoI' : 'fas fa-trash todoI'}\r\n              onClick={handleDelete}\r\n            ></i>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import {\r\n  CREATE_LIST,\r\n  CREATE_TODO,\r\n  DELETE_LIST,\r\n  DELETE_TODO,\r\n  EDIT_LIST_NAME,\r\n  EDIT_TODO,\r\n  TOGGLE_TODO,\r\n} from '../constants/constants';\r\n\r\nexport const addList = (listName) => {\r\n  return {\r\n    type: CREATE_LIST,\r\n    payload: {\r\n      listName,\r\n    },\r\n  };\r\n};\r\n\r\nexport const removeList = (listId) => {\r\n  return {\r\n    type: DELETE_LIST,\r\n    payload: {\r\n      listId,\r\n    },\r\n  };\r\n};\r\n\r\nexport const changeListName = (listId, newName) => {\r\n  return {\r\n    type: EDIT_LIST_NAME,\r\n    payload: {\r\n      listId,\r\n      newName,\r\n    },\r\n  };\r\n};\r\n\r\nexport const createTodo = (listId, todoText) => {\r\n  return {\r\n    type: CREATE_TODO,\r\n    payload: {\r\n      listId,\r\n      todoText,\r\n    },\r\n  };\r\n};\r\n\r\nexport const editTodo = (listId, todoId, newText) => {\r\n  return {\r\n    type: EDIT_TODO,\r\n    payload: {\r\n      listId,\r\n      todoId,\r\n      newText,\r\n    },\r\n  };\r\n};\r\n\r\nexport const toggleTodo = (listId, todoId) => {\r\n  return {\r\n    type: TOGGLE_TODO,\r\n    payload: {\r\n      listId,\r\n      todoId,\r\n    },\r\n  };\r\n};\r\n\r\nexport const deleteTodo = (listId, todoId) => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    payload: {\r\n      listId,\r\n      todoId,\r\n    },\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeListName, createTodo, removeList } from '../actions/actionMaker';\r\nimport './List.scss';\r\nimport Todo from './Todo';\r\n\r\nconst List = (props) => {\r\n  const [inputText, setInputText] = useState('');\r\n  const [editing, setEditing] = useState(false);\r\n  const darkMode = useSelector((state) => state.darkMode);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleInputChange = (evt) => {\r\n    setInputText(evt.target.value);\r\n  };\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    dispatch(createTodo(props.listInfo.id, inputText));\r\n    setInputText('');\r\n  };\r\n\r\n  const handleListNameChange = (evt) => {\r\n    dispatch(changeListName(props.listInfo.id, evt.target.value));\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    dispatch(removeList(props.listInfo.id));\r\n  };\r\n\r\n  return (\r\n    <div className='List'>\r\n      <div className='list-title'>\r\n        <h2\r\n          className={\r\n            (editing ? 'hidden' : null) + ' ' + (darkMode ? 'darkH2' : 'h2')\r\n          }\r\n          onDoubleClick={() => setEditing(true)}\r\n        >\r\n          {props.listInfo.name}\r\n        </h2>\r\n        <input\r\n          type='text'\r\n          value={props.listInfo.name}\r\n          onChange={handleListNameChange}\r\n          className={\r\n            (editing ? 'list-name-input' : 'hidden') +\r\n            ' ' +\r\n            (darkMode ? 'dark' : null)\r\n          }\r\n          onMouseLeave={() => setEditing(false)}\r\n        />\r\n        <i\r\n          class={darkMode ? 'fas fa-trash darkI' : 'fas fa-trash i'}\r\n          onClick={handleDelete}\r\n        ></i>\r\n      </div>\r\n\r\n      <Droppable droppableId={props.listInfo.id} type='todo'>\r\n        {(provided) => (\r\n          <div\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            placeholder={provided.placeholder}\r\n            todos={props.listInfo.todos}\r\n          >\r\n            {props.listInfo.todos.map((todo, index) => {\r\n              return (\r\n                <Todo\r\n                  {...todo}\r\n                  index={index}\r\n                  key={todo.id}\r\n                  listId={props.listInfo.id}\r\n                />\r\n              );\r\n            })}\r\n\r\n            {provided.placeholder}\r\n            <form onSubmit={handleSubmit}>\r\n              <input\r\n                type='text'\r\n                placeholder='New todo...'\r\n                onChange={handleInputChange}\r\n                value={inputText}\r\n                className={darkMode ? 'darkInput' : 'input'}\r\n              />\r\n            </form>\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.scss';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport List from './components/List';\r\nimport {\r\n  DARKMODE_TOGGLE,\r\n  REORDER_COLUMN,\r\n  REORDER_TODO,\r\n} from './constants/constants';\r\nimport { useEffect, useState } from 'react';\r\nimport { addList } from './actions/actionMaker';\r\nimport { DarkModeSwitch } from 'react-toggle-dark-mode';\r\n\r\nfunction App() {\r\n  const [newListName, setNewListName] = useState('');\r\n  const state = useSelector((state) => state);\r\n  const darkMode = useSelector((state) => state.darkMode);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    console.log('Use effect!');\r\n    window.localStorage.setItem('trullo', JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  const onDragEnd = (result) => {\r\n    // console.log(result);\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (type === 'todo') {\r\n      dispatch({\r\n        type: REORDER_TODO,\r\n        payload: {\r\n          destination,\r\n          source,\r\n          draggableId,\r\n        },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: REORDER_COLUMN,\r\n        payload: {\r\n          destination,\r\n          source,\r\n          draggableId,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    dispatch(addList(newListName));\r\n    setNewListName('');\r\n  };\r\n\r\n  const toggleDarkMode = () => {\r\n    dispatch({ type: DARKMODE_TOGGLE });\r\n  };\r\n\r\n  return (\r\n    <div className={darkMode ? 'App darkApp' : 'App'}>\r\n      <nav>\r\n        <h1 className={darkMode ? 'darkH1' : 'h1'}>\r\n          This is <span className={darkMode ? 'darkSpan' : 'span'}>Trullo</span>\r\n          !\r\n        </h1>\r\n        <DarkModeSwitch\r\n          checked={darkMode}\r\n          onChange={toggleDarkMode}\r\n          size={30}\r\n        />\r\n      </nav>\r\n      <main>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type='text'\r\n            placeholder='Create new list'\r\n            value={newListName}\r\n            onChange={(evt) => setNewListName(evt.target.value)}\r\n            className={darkMode ? 'darkNew-list-input' : 'new-list-input'}\r\n          />\r\n        </form>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <Droppable droppableId={uuid()} direction='horizontal' type='column'>\r\n            {(provided) => (\r\n              <div\r\n                className='listsContainer'\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                placeholder={provided.placeholder}\r\n              >\r\n                {state.lists.map((e, index) => {\r\n                  return (\r\n                    <Draggable draggableId={e.id} index={index} key={e.id}>\r\n                      {(provided) => (\r\n                        <div\r\n                          className='list-draggable'\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          ref={provided.innerRef}\r\n                        >\r\n                          <List listInfo={e} key={index} />\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  );\r\n                })}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </main>\r\n      <footer className={darkMode ? 'dark' : null}>\r\n        <p>Made with 💜 by moisesrj97</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { v4 as uuid } from 'uuid';\r\nimport {\r\n  CREATE_LIST,\r\n  CREATE_TODO,\r\n  DARKMODE_TOGGLE,\r\n  DELETE_LIST,\r\n  DELETE_TODO,\r\n  EDIT_LIST_NAME,\r\n  EDIT_TODO,\r\n  REORDER_COLUMN,\r\n  REORDER_TODO,\r\n  TOGGLE_TODO,\r\n} from '../constants/constants';\r\n\r\nconst reducer = (\r\n  state = JSON.parse(window.localStorage.getItem('trullo')) || {\r\n    lists: [],\r\n    darkMode: false,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case CREATE_LIST:\r\n      const newList = {\r\n        id: uuid(),\r\n        name: action.payload.listName,\r\n        todos: [],\r\n      };\r\n      const newState = { ...state, lists: [...state.lists, newList] };\r\n      return newState;\r\n    case DELETE_LIST:\r\n      return {\r\n        ...state,\r\n        lists: state.lists.filter((list) => action.payload.listId !== list.id),\r\n      };\r\n    case EDIT_LIST_NAME:\r\n      return {\r\n        ...state,\r\n        lists: state.lists.map((e) => {\r\n          if (e.id === action.payload.listId) {\r\n            return { ...e, name: action.payload.newName };\r\n          } else {\r\n            return e;\r\n          }\r\n        }),\r\n      };\r\n    case CREATE_TODO:\r\n      const newTodo = {\r\n        id: uuid(),\r\n        text: action.payload.todoText,\r\n        completed: false,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        lists: state.lists.map((list) => {\r\n          if (list.id === action.payload.listId) {\r\n            list.todos.push(newTodo);\r\n            return list;\r\n          } else {\r\n            return list;\r\n          }\r\n        }),\r\n      };\r\n    case EDIT_TODO:\r\n      return {\r\n        ...state,\r\n        lists: state.lists.map((list) => {\r\n          if (list.id === action.payload.listId) {\r\n            return {\r\n              ...list,\r\n              todos: list.todos.map((todo) => {\r\n                if (action.payload.todoId === todo.id) {\r\n                  return { ...todo, text: action.payload.newText };\r\n                } else {\r\n                  return todo;\r\n                }\r\n              }),\r\n            };\r\n          } else {\r\n            return list;\r\n          }\r\n        }),\r\n      };\r\n    case TOGGLE_TODO:\r\n      return {\r\n        ...state,\r\n        lists: state.lists.map((list) => {\r\n          if (list.id === action.payload.listId) {\r\n            return {\r\n              ...list,\r\n              todos: list.todos.map((todo) => {\r\n                if (action.payload.todoId === todo.id) {\r\n                  if (todo.completed) {\r\n                    return { ...todo, completed: false };\r\n                  } else {\r\n                    return { ...todo, completed: true };\r\n                  }\r\n                } else {\r\n                  return todo;\r\n                }\r\n              }),\r\n            };\r\n          } else {\r\n            return list;\r\n          }\r\n        }),\r\n      };\r\n    case DELETE_TODO:\r\n      return {\r\n        ...state,\r\n        lists: state.lists.map((list) => {\r\n          if (list.id === action.payload.listId) {\r\n            return {\r\n              ...list,\r\n              todos: list.todos.filter(\r\n                (todo) => action.payload.todoId !== todo.id\r\n              ),\r\n            };\r\n          } else {\r\n            return list;\r\n          }\r\n        }),\r\n      };\r\n    case REORDER_TODO:\r\n      const sourceList = state.lists.find(\r\n        (e) => e.id === action.payload.source.droppableId\r\n      );\r\n\r\n      const draggableTodo = sourceList.todos.find(\r\n        (todo) => todo.id === action.payload.draggableId\r\n      );\r\n\r\n      if (!action.payload.destination) {\r\n        return state;\r\n      } else if (\r\n        action.payload.destination.droppableId ===\r\n        action.payload.source.droppableId\r\n      ) {\r\n        return {\r\n          ...state,\r\n          lists: state.lists.map((e) => {\r\n            if (e.id === sourceList.id) {\r\n              e.todos.splice(action.payload.source.index, 1);\r\n              e.todos.splice(\r\n                action.payload.destination.index,\r\n                0,\r\n                draggableTodo\r\n              );\r\n              return e;\r\n            } else {\r\n              return e;\r\n            }\r\n          }),\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          lists: state.lists.map((list) => {\r\n            if (list.id === action.payload.source.droppableId) {\r\n              list.todos.splice(action.payload.source.index, 1);\r\n              return list;\r\n            } else if (list.id === action.payload.destination.droppableId) {\r\n              list.todos.splice(\r\n                action.payload.destination.index,\r\n                0,\r\n                draggableTodo\r\n              );\r\n              return list;\r\n            } else {\r\n              return list;\r\n            }\r\n          }),\r\n        };\r\n      }\r\n    case REORDER_COLUMN:\r\n      if (!action.payload.destination) {\r\n        return state;\r\n      } else {\r\n        const draggableColumn = state.lists.find(\r\n          (e) => e.id === action.payload.draggableId\r\n        );\r\n        const newList = [...state.lists];\r\n\r\n        newList.splice(action.payload.source.index, 1);\r\n        newList.splice(action.payload.destination.index, 0, draggableColumn);\r\n\r\n        return {\r\n          ...state,\r\n          lists: newList,\r\n        };\r\n      }\r\n    case DARKMODE_TOGGLE:\r\n      return { ...state, darkMode: !state.darkMode };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from '../reducers/reducer';\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware()));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}